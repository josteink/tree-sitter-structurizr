===
Empty Workspace with name
===

workspace "gnu" {
}

---

(dsl
  (workspace_declaration
    (string)))


===
Empty Workspace with name w/description
===

workspace "gnu" "bar" {
}

---

(dsl
  (workspace_declaration
    (string)
    (string)))

===
Workspaces, multiple
===

workspace "gnu" "bar" {
}

workspace "gnu2" "bar2" {
}

---

(dsl
  (workspace_declaration
    (string)
    (string))
  (workspace_declaration
    (string)
    (string)))

===
Workspace with empty model
===

workspace "gnu" "bar" {
  model {
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (model_declaration)))
      

===
Workspace with model & relation
===

workspace "gnu" "bar" {
  model {
    gnu -> bar "test"
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (model_declaration
      (relation_statement
        (identifier)
        (identifier)
        (string)))))

===
Workspace with model & inner relation
===

workspace "gnu" "bar" {
  model {
    gnu.child -> bar.prop "test"
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (model_declaration
      (relation_statement
        (dotted_identifier (identifier) (identifier))
        (dotted_identifier (identifier) (identifier))
        (string)))))

===
Workspace with model & softwareSystem
===

workspace "gnu" "bar" {
  model {
    gnu = softwareSystem "bar"
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (model_declaration
      (variable_declaration
        (identifier)
        (software_system_declaration
          (string))))))

===
Workspace with model & container
===

workspace "gnu" "bar" {
  model {
    gnu = container "bar"
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (model_declaration
      (variable_declaration
        (identifier)
        (container_declaration
          (string))))))

===
Workspace with model, softwareSystem & container
===

workspace "gnu" "bar" {
  model {
    gnu = softwareSystem "bar" {
       foo = container "baz"
    }
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (model_declaration
      (variable_declaration
        (identifier)
          (software_system_declaration
            (string)
            (variable_declaration
              (identifier)
              (container_declaration
                (string))))))))

===
Workspace with model, softwareSystem & containers
===

workspace "gnu" "bar" {
  model {
    gnu = softwareSystem "bar" {
       foo = container "baz"
       zoo = container "haz"
    }
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (model_declaration
      (variable_declaration
        (identifier)
          (software_system_declaration
            (string)
            (variable_declaration
              (identifier)
              (container_declaration
                (string)))
            (variable_declaration
              (identifier)
              (container_declaration
                (string))))))))

===
Workspace with model & person
===

workspace "gnu" "bar" {
  model {
    bob = person "Bob"
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (model_declaration
      (variable_declaration
        (identifier)
          (person_declaration
            (string))))))

===
Workspace with complex model
===

workspace "gnu" "bar" {
  model {
    bob = person "Bob"
    ss = softwareSystem "Soft" {
      api = container "api"
      web = container "web"
    }
    email = softwareSystem "Email"

    bob -> ss.web "Uses"
    ss.web -> ss.api "Invokes"
    ss.api -> email "Sends notification"
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (model_declaration
      (variable_declaration
        (identifier)
        (person_declaration
          (string)))
      (variable_declaration
        (identifier)
        (software_system_declaration
          (string)
          (variable_declaration
            (identifier)
            (container_declaration
              (string)))
          (variable_declaration
            (identifier)
            (container_declaration
              (string)))))
      (variable_declaration
        (identifier)
        (software_system_declaration
          (string)))
      (relation_statement
        (identifier)
        (dotted_identifier (identifier) (identifier))
        (string))
      (relation_statement
        (dotted_identifier (identifier) (identifier))
        (dotted_identifier (identifier) (identifier))
        (string))
      (relation_statement
        (dotted_identifier (identifier) (identifier))
        (identifier)
        (string)))))

===
Workspace with tagged item
===

workspace "gnu" "bar" {
  model {
    api = container "asp.net core" {
      tags = "OAuth" "NET8"
    }
    db = container "sqlite" {
      tags = "Database"
    }
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (model_declaration
      (variable_declaration
        (identifier)
        (container_declaration
          (string)
          (tags_declaration
            (string)
            (string))))
      (variable_declaration
        (identifier)
        (container_declaration
          (string)
          (tags_declaration
            (string)))))))

===
Workspace with configuration
===

workspace "gnu" "bar" {
  configuration {
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (configuration_declaration)))

===
Workspace with configuration & scope
===

workspace "gnu" "bar" {
  configuration {
    scope softwareSystem
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (configuration_declaration
      (scope_declaration))))

===
Workspace with empty views statement
===

workspace "gnu" "bar" {
  views {
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (views_declaration)))

===
Workspace with views and system-context-view
===

workspace "gnu" "bar" {
  views {
    systemContext so "test" {
    }
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (views_declaration
      (system_context_view_declaration
        (identifier)
        (string)))))

===
Workspace with views and system-context-view w/description
===

workspace "gnu" "bar" {
  views {
    systemContext so "test" "desc" {
    }
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (views_declaration
      (system_context_view_declaration
        (identifier)
        (string)
        (string)))))

===
Workspace with views and container-view
===

workspace "gnu" "bar" {
  views {
    container so "test" {
    }
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (views_declaration
      (container_view_declaration
        (identifier)
        (string)))))

===
Workspace with views and container-view w/description
===

workspace "gnu" "bar" {
  views {
    container so "test" "desc" {
    }
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (views_declaration
      (container_view_declaration
        (identifier)
        (string)
        (string)))))

===
Workspace with views, system-context & properties
===

workspace "gnu" "bar" {
  views {
    systemContext so "test" {
      include * gnu gnu.bar
      exclude bar bar.code
      autolayout lr
    }
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (views_declaration
      (system_context_view_declaration
        (identifier)
        (string)
        (include_statement
          (wildcard_identifier)
          (identifier)
          (dotted_identifier (identifier) (identifier)))
        (exclude_statement
          (identifier)
          (dotted_identifier (identifier) (identifier)))
        (autolayout_statement
          (autolayout_value))))))

===
Workspace with views, container & properties
===

workspace "gnu" "bar" {
  views {
    container so "test" {
      include * gnu
      exclude bar
      autolayout lr
      description "well hello"
    }
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (views_declaration
      (container_view_declaration
        (identifier)
        (string)
        (include_statement
          (wildcard_identifier)
          (identifier))
        (exclude_statement
          (identifier))
        (autolayout_statement
          (autolayout_value))
        (description_statement
          (string))))))


===
Workspace with views & styles
===

workspace "gnu" "bar" {
  views {
    styles {
      element "element" {
        prop1 "string"
        prop2 identifier
        prop3 200
        color #ffffff
      }
    }
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (views_declaration
      (styles_declaration
        (element_declaration
          (string)
          (element_property
            (identifier)
            (string))
          (element_property
            (identifier)
            (identifier))
          (element_property
            (identifier)
            (number))
          (element_property
            (identifier)
            (color)))))))

===
Workspace with identifiers statement
===

workspace "gnu" "bar" {
  !identifiers flat
}

workspace "gnu" "bar" {
  !identifiers hierarchical
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (identifiers_statement
      (identifiers_value)))
  (workspace_declaration
    (string)
    (string)
    (identifiers_statement
      (identifiers_value))))

===
Workspace with views, dynamic-view & wildcards
===

workspace "gnu" "bar" {
  views {
    dynamic * "Gnu_Invokes_Gpl" "How it all fits together" {
    }
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (string)
    (views_declaration
      (dynamic_view_declaration
        (wildcard_identifier)
        (string)
        (string)))))

===
Workspace with comments
===

workspace "commented" {
  #  single line comment 1
  // single line comment 2

  /* single line comment 3 */

  /*
     multi line comment
   */

  model {
    # model comment
  }

  views {
    // another comment
  }
}

---

(dsl
  (workspace_declaration
    (string)
    (comment)
    (comment)
    (comment)
    (comment)
    (model_declaration
      (comment))
    (views_declaration
      (comment))))
g
